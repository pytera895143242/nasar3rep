from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.utils import executor
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import logging
import sqlite3

from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton

from config import TOKEN
import text_or_question as text
import keaboard as kb
import time
import datetime
import asyncio

from db_admin import DateBase

from sqlit import reg_user,obnova_members_status,count_member_in_status,info_members,send_status_no_rassilka,cheack_status

datebase = DateBase('users.db')

bot = Bot(token=TOKEN)
db = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

class st_reg(StatesGroup):
    st_name = State()
    st_fname = State()
    step_q = State()
    step_regbutton = State()

user_list1 = []
user_list2 = []
user_list3 = []
user_list4 = []
user_list5 = []
user_list6 = []
user_list7 = []
user_list8 = []


class Form(StatesGroup):
    info_text = State()
    user_delete = State()

ADMIN_ID_1 = 494588959 #C–∞–Ω—è
ADMIN_ID_2 = 44520977 #–ö–æ–ª—è
ADMIN_ID_3 = 678623761 #–ë–µ–∫–∏—Ä
ADMIN_ID_4 = 941730379 #–î–∂–µ–π—Å–æ–Ω
ADMIN_ID_5 = 807911349 #–ë–∞–π–∑–∞—Ç
ADMIN_ID_6 = 1045832338 #–ö–æ–ª—è 2 (–ù–ò–ö–û–õ–ê_–û–î–ù–û–£–°)

ADMIN = [ADMIN_ID_1,ADMIN_ID_2,ADMIN_ID_3,ADMIN_ID_4,ADMIN_ID_5,ADMIN_ID_6]

user_1 = '@nikolanext' #–î–õ–Ø –¢–ï–•, –ö–¢–û –ü–õ–ê–¢–ù–´–ô (1)
user02349 = '@NikolaOdnous' #–î–õ–Ø –¢–ï–•, –ö–¢–û –ù–ï (1)

@db.message_handler(commands=['start'])
async def greetings(message: types.Message):

    user_id = message.chat.id
    reg_user(user_id,0) #–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É —á–µ–ª–æ–≤–µ–∫–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 0

    m = await message.answer_photo(text.hi_photo_id, caption=text.hi_text, reply_markup=kb.the_first_go_button)

    go_new = '–ì'
    for i in range(1,14):
        go_new+='–æ'
        await bot.edit_message_caption(chat_id=user_id,message_id=m.message_id,caption=text.hi_text.format(go_new),reply_markup=kb.the_first_go_button)
        await asyncio.sleep(0.43)



@db.message_handler(commands=['admin'])
async def vienw_adminka(message: types.Message):
    if message.chat.id in ADMIN:
        button1 = KeyboardButton('üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')

        button2 = KeyboardButton('üíø–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö')
        button3 = KeyboardButton('üî´–£–¥–∞–ª–µ–Ω–∏–µ —á–µ–ª–æ–≤')

        button4 = KeyboardButton('üÜì–†–∞—Å—Å—ã–ª–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∏–∫–∞–º')
        button5 = KeyboardButton('üí∞–†–∞—Å—Å—ã–ª–∫–∞ –ø–ª–∞—Ç–Ω–∏–∫–∞–º')

        markup3 = ReplyKeyboardMarkup(resize_keyboard=True)
        markup3 = markup3.add(button1)
        markup3 = markup3.add(button2,button3)
        markup3 = markup3.add(button4,button5)

        await bot.send_message(chat_id=message.chat.id,text='–û—Ç–∫—Ä—ã—Ç–∞ –∞–¥–º–∏–Ω–∫–∞ üîò',reply_markup=markup3)





@db.message_handler(state=Form.user_delete,content_types=['video','voice','photo','video_note','file','document','text'])
async def delete_user(message: types.Message, state: FSMContext):
    try:
        user_id = message.forward_from.id
        send_status_no_rassilka(user_id)
    except Exception as e:
        print(e)

    markup = types.InlineKeyboardMarkup()
    bat_otmena12 = types.InlineKeyboardButton(text='–í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —É–¥–∞–ª–µ–Ω–∏—è',callback_data='exit_del')
    markup.add(bat_otmena12)

    await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω ü©∏',reply_markup=markup)



@db.message_handler(state=Form.info_text, content_types=['text', 'photo', 'video_note', 'video', 'voice'])
async def send_mailing_text(message: types.Message, state: FSMContext):
    if message.text == '–æ—Ç–º–µ–Ω–∞':
        await state.finish()
        await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ')
    if message.text or message.photo or message.video:
        for user_id in datebase.mailing_user_id():
            if message.text and message.photo:
                await bot.send_photo(user_id[1], message.photo[2].file_id, caption=message.text)
            elif message.text and message.video:
                await bot.send_video(user_id[1], message.video.file_id, caption=message.text)
            elif message.photo:
                await bot.send_photo(user_id[1], message.photo[2].file_id)
            elif message.video:
                await bot.send_video(user_id[1], message.video.file_id)
            elif message.text:
                await bot.send_message(user_id[1], message.text)
    elif message.video_note:
        for user_id in datebase.mailing_user_id():
            await bot.send_video_note(user_id[1], message.video_note.file_id)
    elif message.voice:
        for user_id in datebase.mailing_user_id():
            await bot.send_voice(user_id[1], message.voice.file_id)
    await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞.')
    await message.answer(f'–†–∞—Å—Å—ã–ª–∫—É –ø–æ–ª—É—á–∏–ª–∏ {datebase.count_string2()} –∏–∑ {datebase.count_string()}')
    await state.finish()


@db.callback_query_handler(lambda call: True, state = '*')
async def answer_push_inline_button(call, state: FSMContext):
    global user_list1
    user_id = call.message.chat.id # –Æ–ó–ï–† –ß–ï–õ–ê
    status = (cheack_status(user_id))[0]
    if status == 1:
        username_contact = user_1
    else:
        username_contact = user02349

    if call.data == 'go_button':
        await state.finish()
        await bot.send_message(chat_id=call.message.chat.id,text='–û—Ç–º–µ–Ω–µ–Ω–æ. –í–∫–ª—é—á–µ–Ω –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º‚úÖ')
    if call.data == 'go_button':
        await call.message.answer_video_note(text.video_note_id, reply_markup=kb.pass_the_five_question)
    elif call.data == 'five_question':
        await call.message.answer_animation(text.the_first_question_gif_id, caption=text.the_first_question_text,
                                            reply_markup=kb.first_question_buttons)
    elif call.data == 'first_question':
        await call.message.delete()
        await call.message.answer_animation(text.the_second_question_gif_id, caption=text.the_second_question_text,
                                            reply_markup=kb.second_question_buttons)
    elif call.data == 'second_question':
        await call.message.delete()
        await call.message.answer_animation(text.the_third_question_gif_id, caption=text.the_third_question_text,
                                            reply_markup=kb.third_question_buttons)
    elif call.data == 'third_question':
        await call.message.delete()
        await call.message.answer_animation(text.the_fourth_question_gif_id, caption=text.the_fourth_question_text,
                                            reply_markup=kb.fourth_question_buttons)


    elif call.data[:15] == 'fourth_question':
        if call.data == 'fourth_question1': # –ß–µ–ª–æ–≤–µ–∫ –∏–∑ —Ä–µ–∫–ª–∞–º—ã –∏–Ω—Å—Ç
            obnova_members_status(call.message.chat.id, 1)
        if call.data == 'fourth_question2': # –ß–µ–ª–æ–≤–µ–∫ –∏–∑ –¢–∏–∫–¢–æ–∫–∞
            obnova_members_status(call.message.chat.id, 2)
        if call.data == 'fourth_question3': # –ß–µ–ª–æ–≤–µ–∫ –∏–∑ –†–∏–ª—Å–∞
            obnova_members_status(call.message.chat.id, 3)
        if call.data == 'fourth_question4': # –î—Ä—É–≥–æ–µ
            obnova_members_status(call.message.chat.id, 4)

        await call.message.delete()
        await call.message.answer_animation(text.the_five_question_gif_id, caption=text.the_five_question_text,
                                            reply_markup=kb.five_question_buttons)




    elif call.data == 'five_questions':
        await call.message.delete()
        await call.message.answer('üï∫üèª–ê –≤–æ—Ç –∏ –æ–±–µ—â–∞–Ω–Ω—ã–π –±–æ–Ω—É—Å üï∫üèª')
        await call.message.answer_document(text.bonus_dock_file_id)
        await call.message.answer_photo(text.finished_text_file_id, caption=text.finished_text, reply_markup=kb.finished_text_button)

    elif call.data == 'go_2':
        await call.message.answer_video('BAACAgIAAxkBAAMmYV1W4yEZI3tZMuEFt7TzpRXmTtMAAskPAALV8iFKl-Icg7tg87IhBA')
        # await call.message.answer('–ü–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ')
        await asyncio.sleep(78)#60
        await call.message.answer(text='–ñ–º—è–∫–∞–π –∫–Ω–æ–ø–∫—É –ø–æ–∫–∞ –Ω–µ —É–±–µ–∂–∞–ª–∞üëá', reply_markup=kb.further_button)

    elif call.data == 'further':
        await call.message.answer_video('BAACAgIAAxkBAAMoYV1XarMS_OoOn_Vwr3oJ9liOtPkAAogVAALalClKikrq4brnf-0hBA')
        # await call.message.answer('–í—Ç–æ—Ä–æ–µ –≤–∏–¥–µ–æ')
        await asyncio.sleep(136)#136
        await call.message.answer(text='–ñ–º—è–∫–∞–π –∫–Ω–æ–ø–∫—É –ø–æ–∫–∞ –Ω–µ —É–±–µ–∂–∞–ª–∞üëá', reply_markup=kb.futher2_button)

    elif call.data == 'further2':
        await call.message.answer_video(f'BAACAgIAAxkBAAMqYV1XrtFkA-VnlCNrx2scKWuU6pUAAp0TAAKBgcBKIdx8Ive5nrYhBA')
        # await call.message.answer('–¢—Ä–µ—Ç—å–µ –≤–∏–¥–µ–æ')
        await asyncio.sleep(205)#205
        await call.message.answer(text.last_text.format(username_contact))
        user_id = call.message.chat.id
        username = call.message.from_user.username

        # –ï—Å–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ —á–µ–ª–æ–≤–µ–∫ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –Ω–∏ –≤ –æ–¥–Ω–æ–π –∏–∑ –≥—Ä—É–ø–ø–µ, —Ç–æ –¥–æ–±–∞–ª–≤—è–µ–º –µ–≥–æ –≤ –ø–µ—Ä–≤—É—é
        if (user_id not in user_list1) and (user_id not in user_list2) and (user_id not in user_list3) and (user_id not in user_list4) and (user_id not in user_list5) and (user_id not in user_list6) and (user_id not in user_list7) and (user_id not in user_list8):
            #–ï–°–õ–ò –ß–ï–õ–ê –ù–ï–¢–£ –ù–ò –í –û–î–ù–û–ô –ò–ó –ì–†–£–ü–ü –î–õ–Ø –ü–†–û–ì–†–ï–í–ê, –¢–û:
            user_list1.append(user_id)
            try:
                datebase.records_of_mailing_users(username, user_id)
            except Exception as e:
                print(e)



@db.message_handler(content_types=['text', 'photo', 'video_note', 'animation', 'document', 'video','file'])
async def all_message(message: types.Message, state: FSMContext):
    # try:
    #     print(message.video.file_id)
    # except:
    #     pass
    #
    # try:
    #     print(message.photo[2].file_id)
    # except:
    #     pass
    #
    # try:
    #     print(message.video_note.file_id)
    # except:
    #     pass
    #
    # try:
    #     print(message.animation.file_id)
    # except:
    #     pass
    #
    # try:
    #     print(message.document.file_id)
    # except:
    #     pass
    #
    if message.chat.id in ADMIN:


        if message.text == 'üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π':
            all = info_members()# –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            s1 = count_member_in_status(1)
            s2 = count_member_in_status(2)
            s3 = count_member_in_status(3)
            s4 = count_member_in_status(4)

            s0 = count_member_in_status(0) #–ï—â–µ –Ω–µ –≤—ã–±—Ä–ø–∞–ª–∏ –æ—Ç–≤–µ—Ç


            await bot.send_message(chat_id=message.chat.id,text=f"""<b>üë•–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {all}</b>

1Ô∏è‚É£–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∏–Ω—Å—Ç—ã: {s1}
2Ô∏è‚É£–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –¢–∏–∫–¢–æ–∫–∞ : {s2}
3Ô∏è‚É£–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –†–∏–ª—Å–∞: {s3}
4Ô∏è‚É£–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ ¬´–î—Ä—É–≥–æ–≥–æ¬ª: {s4}

üü°–ï—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –æ—Ç–≤–µ—Ç: {s0}""",parse_mode='html')

        if message.text == 'üíø–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö':
            await message.answer_document(open("server.db", "rb"))

        if message.text == 'üî´–£–¥–∞–ª–µ–Ω–∏–µ —á–µ–ª–æ–≤':
            await message.answer('üë∫–í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏–µ —á–µ–ª–æ–≤ \n'
                                 'üîô–î–ª—è –≤—ã—Ö–æ–¥–∞, –Ω–∞–ø–∏—à–∏ "–æ—Ç–º–µ–Ω–∞"')
            await Form.user_delete.set()

        if message.text == 'üÜì–†–∞—Å—Å—ã–ª–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∏–∫–∞–º': #–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≥—Ä—É–ø–ø–µ 2,3,4,0
            murkap = types.InlineKeyboardMarkup()
            bat0 = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ê', callback_data='otemena')
            murkap.add(bat0)
            await bot.send_message(message.chat.id, '–ü–µ—Ä–µ—à–ª–∏ –º–Ω–µ —É–∂–µ –≥–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç –∏ —è —Ä–∞–∑–æ—à–ª—é –µ–≥–æ –≤—Å–µ–º —é–∑–µ—Ä–∞–º',
                                   reply_markup=murkap)
            await st_reg.step_q.set()

            await state.update_data(type_rassilki = 2340) # –¢–ò–ü —Ä–∞—Å—Å–ª—ã–∫–∏ –ø–æ 2,3,4,0 –≥—Ä—É–ø–ø–µ

        if message.text == 'üí∞–†–∞—Å—Å—ã–ª–∫–∞ –ø–ª–∞—Ç–Ω–∏–∫–∞–º': #–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≥—Ä—É–ø–ø–µ 1
            murkap = types.InlineKeyboardMarkup()
            bat0 = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ê', callback_data='otemena')
            murkap.add(bat0)
            await bot.send_message(message.chat.id, '–ü–µ—Ä–µ—à–ª–∏ –º–Ω–µ —É–∂–µ –≥–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç –∏ —è —Ä–∞–∑–æ—à–ª—é –µ–≥–æ –≤—Å–µ–º —é–∑–µ—Ä–∞–º',
                                   reply_markup=murkap)
            await st_reg.step_q.set()

            await state.update_data(type_rassilki=1) # –¢–ò–ü —Ä–∞—Å—Å–ª—ã–∫–∏ –ø–æ –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø–µ




#–ü–†–û–ì–†–ï–í
async def send_to_a_certain_hour():
    while True:


        offset = datetime.timezone(datetime.timedelta(hours=3))
        now_time = datetime.datetime.now(offset)

        if now_time.hour == 16:
            for user7 in user_list7:
                status = (cheack_status(user7))[0]
                if status == 1:
                    username_contact = user_1
                else:
                    username_contact = user02349
                if status != 9:
                    await bot.send_message(user7, text=text.dayly_text7.format(username_contact))
                    user_list7.remove(user7)
                    user_list8.append(user7)

            for user6 in user_list6:
                status = (cheack_status(user6))[0]
                if status == 1:
                    username_contact = user_1
                else:
                    username_contact = user02349
                if status != 9:
                    await bot.send_photo(user6, photo=text.dayly_photo_id6, caption=text.dayly_text6.format(username_contact))
                    user_list7.append(user6)
                    user_list6.remove(user6)

            for user5 in user_list5:
                status = (cheack_status(user5))[0]
                if status == 1:
                    username_contact = user_1
                else:
                    username_contact = user02349

                if status != 9:
                    await bot.send_photo(user5, photo=text.dayly_photo_id5, caption=text.dayly_text5.format(username_contact))
                    user_list6.append(user5)
                    user_list5.remove(user5)

            for user4 in user_list4:
                status = (cheack_status(user4))[0]
                if status == 1:
                    username_contact = user_1
                else:
                    username_contact = user02349
                if status != 9:
                    await bot.send_photo(user4, photo=text.dayly_photo_id4, caption=text.dayly_text4.format(username_contact))
                    user_list5.append(user4)
                    user_list4.remove(user4)

            for user3 in user_list3:
                status = (cheack_status(user3))[0]
                if status == 1:
                    username_contact = user_1
                else:
                    username_contact = user02349
                if status != 9:
                    await bot.send_photo(user3, photo=text.dayly_photo_id3, caption=text.dayly_text3.format(username_contact))
                    user_list4.append(user3)
                    user_list3.remove(user3)

            for user2 in user_list2:
                status = (cheack_status(user2))[0]
                if status == 1:
                    username_contact = user_1
                else:
                    username_contact = user02349
                if status != 9:
                    await bot.send_message(user2, text=text.dayly_text2.format(username_contact))
                    user_list3.append(user2)
                    user_list2.remove(user2)

            for user1 in user_list1:
                status = (cheack_status(user1))[0]
                if status == 1:
                    username_contact = user_1
                else:
                    username_contact = user02349
                if status != 9:
                    await bot.send_photo(user1, photo=text.dayly_photo_id1, caption=text.dayly_text1.format(username_contact))
                    user_list2.append(user1)
                    user_list1.remove(user1)


        await asyncio.sleep(3600)


async def shutdown(dispatcher: Dispatcher):
    await dispatcher.storage.close()
    await dispatcher.storage.wait_closed()



@db.callback_query_handler(text='otemena',state='*')
async def otmena_12(call: types.callback_query, state: FSMContext):
    await bot.send_message(call.message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ')
    await state.finish()
    try:
        await bot.delete_message(call.message.chat.id,message_id=call.message.message_id)
    except: pass



@db.message_handler(state=st_reg.step_q,content_types=['text','photo','video','video_note','animation','voice','sticker']) # –ü—Ä–µ–¥–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞
async def redarkt_post(message: types.Message, state: FSMContext):
    await st_reg.st_name.set()
    murkap = types.InlineKeyboardMarkup()
    bat0 = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ê', callback_data='otemena')
    bat1 = types.InlineKeyboardButton(text='–†–ê–ó–û–°–õ–ê–¢–¨', callback_data='send_ras')
    bat2 = types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏', callback_data='add_but')
    murkap.add(bat1)
    murkap.add(bat2)
    murkap.add(bat0)

    await message.copy_to(chat_id=message.chat.id)
    q = message
    await state.update_data(q=q)

    await bot.send_message(chat_id=message.chat.id,text='–ü–æ—Å—Ç —Å–µ–π—á–∞—Å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫ üëÜ',reply_markup=murkap)



# –ù–ê–°–¢–†–û–ô–ö–ê –ö–ù–û–ü–û–ö
@db.callback_query_handler(text='add_but',state=st_reg.st_name) # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
async def addbutton(call: types.callback_query, state: FSMContext):
    await bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
    await bot.send_message(call.message.chat.id,text='–û—Ç–ø—Ä–∞–≤–ª—è–π –º–Ω–µ –∫–Ω–æ–ø–∫–∏ –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É Controller Bot\n\n'
                                                     '–ü–æ–∫–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É')
    await st_reg.step_regbutton.set()


@db.message_handler(state=st_reg.step_regbutton,content_types=['text']) # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ –≤ –Ω–µ—Ñ–æ—Ä–º–∞—Ç–µ
async def redarkt_button(message: types.Message, state: FSMContext):
    arr2 = message.text.split('-')

    k = -1  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏–∑ –∫–Ω–æ–ø–æ–∫
    for i in arr2:
        k+=1
        if i[0] == ' ':
            if i[-1] == ' ':
                arr2[k] = (i[1:-1])
            else:
                arr2[k] = (i[1:])

        else:
            if i[-1] == ' ':

                arr2[0] = (i[:-1])
            else:
                pass

    # arr2 - –ú–∞—Å—Å–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏


    try:
        murkap = types.InlineKeyboardMarkup() #–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        bat = types.InlineKeyboardButton(text= arr2[0], url=arr2[1])
        murkap.add(bat)

        data = await state.get_data()
        mess = data['q']  # ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏

        await bot.copy_message(chat_id=message.chat.id, from_chat_id=message.chat.id,message_id=mess.message_id,reply_markup=murkap)

        await state.update_data(text_but =arr2[0]) # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –°–µ—Ç–∞
        await state.update_data(url_but=arr2[1])  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –°–µ—Ç–∞

        murkap2 = types.InlineKeyboardMarkup() # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ - –º–µ–Ω—é
        bat0 = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ê', callback_data='otemena')
        bat1 = types.InlineKeyboardButton(text='–†–ê–ó–û–°–õ–ê–¢–¨', callback_data='send_ras')
        murkap2.add(bat1)
        murkap2.add(bat0)

        await bot.send_message(chat_id=message.chat.id,text='–¢–µ–ø–µ—Ä—å —Ç–≤–æ–π –ø–æ—Å—Ç –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫‚òù',reply_markup=murkap2)


    except:
        await bot.send_message(chat_id=message.chat.id,text='–û—à–∏–±–∫–∞. –û—Ç–º–µ–Ω–µ–Ω–æ')
        await state.finish()


# –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ô–ö–ò –ö–ù–û–ü–û–ö


@db.callback_query_handler(text='send_ras',state="*") # –†–∞—Å—Å—ã–ª–∫–∞
async def fname_step(call: types.callback_query, state: FSMContext):
    await bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)

    data = await state.get_data()
    mess = data['q'] # –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏

    type_rass = data['type_rassilki']
    murkap = types.InlineKeyboardMarkup()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏

    try: #–ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏. –ï—Å–ª–∏ –∏—Ö –Ω–µ—Ç—É –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–ª–∞–≤—É –ø—É—Å—Ç–æ–π
        text_but = data['text_but']
        url_but = data['url_but']
        bat = types.InlineKeyboardButton(text=text_but, url=url_but)
        murkap.add(bat)
    except: pass


    db = sqlite3.connect('server.db')
    sql = db.cursor()
    await state.finish()
    if type_rass == 1:
        users = sql.execute(f"SELECT id FROM user_time WHERE status_active = 1").fetchall()
    else:
        users = sql.execute(f"SELECT id FROM user_time WHERE status_active = 0 or status_active = 2 or status_active = 3 or status_active =4").fetchall()

    bad = 0
    good = 0
    await bot.send_message(call.message.chat.id, f"<b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{len(users)}</code></b>\n\n<b>–†–∞—Å—Å–ª—ã–∫–∞ –Ω–∞—á–∞—Ç–∞!</b>",
                           parse_mode="html")
    for i in users:
        await asyncio.sleep(1)
        try:
            await mess.copy_to(i[0],reply_markup=murkap)
            good += 1
        except:
            bad += 1

    await bot.send_message(
        call.message.chat.id,
        "<u>–†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞\n\n</u>"
        f"<b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <code>{len(users)}</code>\n"
        f"<b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> <code>{good}</code>\n"
        f"<b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:</b> <code>{bad}</code>",
        parse_mode="html"
    )
#########################################################



if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(send_to_a_certain_hour())
    executor.start_polling(db, on_shutdown=shutdown,skip_updates=True)
